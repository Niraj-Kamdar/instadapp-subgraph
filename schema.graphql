#################################################
# Interfaces
#################################################

# Smart-contract Interfaces

interface ILog {
  id: ID!  # {transaction_hash}-{logId}
  timestamp: BigInt!  
}

interface IContract {
  id: ID!  # Address of the contract (generally)
  createdAt: BigInt!
}

# Editable enitity Interfaces

interface IEditableParent {
  """
  Parent Interface to keep track of all the historical modifications
  """
  id: ID!
  latestVersion: BigInt!
}

interface IEditable {
  """
  Child Interface to store metadata necessary to get view of the historical snapshot of the entity
  Note: this version is different than the version of InstaAccount. 
  The version here is only used for tracking modifications of the particular entity
  """
  id: ID!  # {parentId}-{version}
  version: BigInt!
  createdAt: BigInt!
  deletedAt: BigInt
}

#################################################
# High level Entities
#################################################

type InstaIndex implements IContract @entity {
  """
  @dev: This is indexed with setBasics callHandler or with contract calls on other eventHandlers
  """
  id: ID!  # Address of the InstaIndex
  master: Bytes!  # Address of master
  newMaster: Bytes!  # Address of newMaster
  instaList: InstaList!
  versions: [Version!] @derivedFrom(field: "instaIndex")
  latestVersion: Version!
  createdAt: BigInt!
}

type Version implements IContract @entity {
  id: ID!  # version number
  instaAccount: InstaAccount!
  instaConnectorProxy: InstaConnectorProxy!
  check: Bytes!  # Address of check module
  instaIndex:  InstaIndex!
  createdAt: BigInt!
}

type InstaList implements IContract @entity {
  id: ID!  # Address of the InstaList
  instaIndex: InstaIndex!
  accounts: [Account!] @derivedFrom(field: "instaList")  # List of all DSA
  totalAccounts: BigInt!
  createdAt: BigInt!
}

type Account @entity {
  id: ID!  # Account address
  accountNumber: BigInt!
  instaList: InstaList!
  version: Version!  # InstaAccount version of the account
  owners: [AccountOwnerList!] @derivedFrom(field: "account")
  logCasts: [LogCastEvent!] @derivedFrom(field: "account")  # List of all the casts performed by the account
  createdAt: BigInt!
}

type Owner @entity {
  id: ID!  # Owner Address
  accounts: [AccountOwnerList!] @derivedFrom(field: "owner")
}

type AccountOwnerList implements IEditableParent @entity {
  id: ID!  # accountId-ownerId
  account: Account!
  owner: Owner!
  accountOwners: [AccountOwner!]
  latestVersion: BigInt!
}

type AccountOwner implements IEditable @entity {
  id: ID! # accountId-ownerId-version
  accountOwnerList: AccountOwnerList!
  version: BigInt!
  createdAt: BigInt!
  deletedAt: BigInt
}

type InstaAccount implements IContract @entity {
  id: ID!  # Address of the InstaAccount
  version: Version!
  instaImplementation: InstaImplementation  # Only available for V2
  createdAt: BigInt!
}

type InstaImplementation implements IContract @entity {
  id: ID!  # Address of the  InstaImplementation
  instaAccount: InstaAccount
  defaultImplementation: Bytes  # Address of the defaultImplementation
  implementations: [Implementation!] @derivedFrom(field: "instaImplementation")
  createdAt: BigInt!
}

type Implementation @entity {
  id: ID!  # Address of the Implementation
  signatures: [Signature!] @derivedFrom(field: "implementation")
  totalSignatures: Int!
  instaImplementation: InstaImplementation
  createdAt: BigInt!
  deletedAt: BigInt
}

type Signature @entity {
  id: ID!  # {implementationAddress}-{signature}
  signature: Bytes!
  implementation: Implementation!
}

# Note: For V1 Proxy and implementation address will be same.
type InstaConnectorProxy @entity {
  id: ID!  # InstaConnector proxy address (same as InstaConnector address in case of V1)
  implementation: InstaConnector
  createdAt: BigInt!
}

type InstaConnector implements IContract @entity {
  id: ID!  # InstaConnector address
  chiefs: [Chief!] @derivedFrom(field: "instaConnector")
  connectors: [Connector!] @derivedFrom(field: "instaConnector")
  totalChiefs: BigInt!
  totalActiveChiefs: BigInt!
  totalConnectors: BigInt!
  totalActiveConnectors: BigInt!
  instaConnectorProxy: InstaConnectorProxy
  version: Version
  createdAt: BigInt!
}

type ChiefList implements IEditableParent @entity {
  id: ID!  # Address of the chief
  chiefs: [Chief!] @derivedFrom(field: "chiefList")
  latestVersion: BigInt!
}

type Chief implements IEditable @entity {
  id: ID!  # {chiefId}-{version}
  address: Bytes!  # Address of the chief
  isActive: Boolean!
  instaConnector: InstaConnector!
  chiefList: ChiefList!
  version: BigInt!
  createdAt: BigInt!
  deletedAt: BigInt
}

type ConnectorList implements IEditableParent @entity {
  id: ID!  # same as name
  name: String!
  nameHash: Bytes!
  connectors: [Connector!] @derivedFrom(field: "connectorList")
  latestVersion: BigInt!
}

type Connector implements IEditable @entity {
  id: ID!  # {connectorId}-{version}
  address: Bytes!  # Address of the connector
  instaConnector: InstaConnector!
  connectorList: ConnectorList!
  isStatic: Boolean
  version: BigInt!
  createdAt: BigInt!
  deletedAt: BigInt
}

#################################################
# Events
#################################################

type LogNewMasterEvent implements ILog @entity {
  id: ID!
  master: Bytes!  # Address of the master
  timestamp: BigInt!
}

type LogUpdateMasterEvent implements ILog @entity {
  id: ID!
  master: Bytes!  # Address of the master
  timestamp: BigInt!
}

type LogNewCheckEvent implements ILog @entity {
  id: ID!
  version: BigInt!
  check: Bytes!  # Address of the check module
  timestamp: BigInt!
}

type LogNewAccountEvent implements ILog @entity {
  id: ID!
  version: Version!
  timestamp: BigInt!
}

type LogAccountCreatedEvent implements ILog @entity {
  id: ID!
  sender: Bytes!  # Address of the sender
  owner: Bytes!  # Address of the owner
  account: Bytes!  # Address of the account
  origin: Bytes!  # Address of the origin
  version: String!
  timestamp: BigInt!
}

type LogSetDefaultImplementationEvent implements ILog @entity {
  id: ID!
  oldImplementation: Bytes!  # Address of the old default implementation
  newImplementation: Bytes!  # Address of the new default implementation
  timestamp: BigInt!
}

type LogAddImplementationEvent implements ILog @entity {
  id: ID!
  implementation: Implementation!
  timestamp: BigInt!
}

type LogRemoveImplementationEvent implements ILog @entity {
  id: ID!
  implementation: Implementation!
  timestamp: BigInt!
}

type LogSpell @entity {
  id: ID!  # logCastid + spellIndex
  targetName: String!
  target: Bytes!  # Address of the target
  eventName: String!
  eventParams: Bytes!
  cast: LogCastEvent!
}

type LogCastEvent implements ILog @entity {
  id: ID!
  account: Account!
  origin: Bytes!  # Address of the origin
  sender: Bytes!  # Address of the sender
  value: BigInt!  # ETH value
  spells: [LogSpell!] @derivedFrom(field: "cast")
  totalSpells: BigInt
  timestamp: BigInt!
}

type LogEnableUserEvent implements ILog @entity {
  id: ID!
  accountOwner: AccountOwner!
  timestamp: BigInt!
}

type LogDisableUserEvent implements ILog @entity {
  id: ID!
  accountOwner: AccountOwner!
  timestamp: BigInt!
}

type LogControllerEvent implements ILog @entity {
  id: ID!
  chief: Chief!
  timestamp: BigInt!
}

type LogConnectorAddedEvent implements ILog @entity {
  id: ID!
  connector: Connector!
  timestamp: BigInt!
}

type LogConnectorUpdatedEvent implements ILog @entity {
  id: ID!
  oldConnector: Connector!
  newConnector: Connector!
  timestamp: BigInt!
}

type LogConnectorRemovedEvent implements ILog @entity {
  id: ID!
  connector: Connector!
  timestamp: BigInt!
}